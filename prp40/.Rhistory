par(mar = c(8, 4, 4, 4))
boxplot(-log2(efficiency.5ss.rel[, 7:ncol(efficiency.5ss.rel)]),
las = 3, cex.axis = 0.6, mar = c(8, 4, 4, 4),
ylab = '-log2(splicing efficiency ratio S1/S2)', main = '(intron_S1/transreads_S1) / (intron_S2/transreads_S2)\n5\' intron end')
abline(h = 0)
boxplot(-log2(efficiency.3ss.rel[, 7:ncol(efficiency.3ss.rel)]),
las = 3, cex.axis = 0.6, mar = c(8, 4, 4, 4),
ylab = '-log2(splicing efficiency ratio S1/S2)', main = '(intron_S1/transreads_S1) / (intron_S2/transreads_S2)\n3\' intron end')
abline(h = 0)
dev.off()
plot(efficiency.5ss[, 7] + 0.01, efficiency.5ss[, 8] + 0.01, log = 'xy', pch = 20, xlim = c(0.01, 700), ylim = c(0.01, 700))
nrow(samples)
samples
nrow(comparisons)
# generate diagnostic plots of 3'ss and  5'ss coverage
pseudocount <- 0.1
for (i in 1:nrow(bam.files)){
pdf(paste('./images/', colnames(ss3)[i + 6], '_intron_coverage.pdf', sep = ''))
plot(ss3[, i + 6] + pseudocount, ss5[, i + 6] + pseudocount,
pch = 20, log = 'xy',
xlab = "3' end counts",
ylab = "5' end counts",
main = paste(colnames(ss3)[i + 6], '(intron counts)', sep = '\n'),
sub = paste('Pearson R=', round(cor(ss3[, i + 6] + pseudocount, ss5[, i + 6] + pseudocount), 3), sep = ''))
abline(h = 0.5, col = 'blue')
abline(v = 0.5, col = 'blue')
plot((ss3[, i + 6] + pseudocount) / (ss5[, i + 6] + pseudocount),
pch = 20, log = 'y',
xlab = "genes",
ylab = "3' end counts / 5' end counts",
main = colnames(ss3)[i + 6])
abline(h = 0.5, col = 'blue')
abline(v = 0.5, col = 'blue')
dev.off()
}
# generate diagnostic plots of 3'ss and  5'ss coverage
pseudocount <- 0.1
for (i in 1:nrow(bam.files)){
pdf(paste('./images/', colnames(ss3)[i + 6], '_intron_coverage.pdf', sep = ''))
plot(ss3[, i + 6] + pseudocount, ss5[, i + 6] + pseudocount,
pch = 20, log = 'xy',
xlab = "3' end counts",
ylab = "5' end counts",
main = paste(colnames(ss3)[i + 6], '(intron counts)', sep = '\n'),
sub = paste('Pearson R=', round(cor(ss3[, i + 6] + pseudocount, ss5[, i + 6] + pseudocount), 3), sep = ''))
abline(h = 0.5, col = 'blue')
abline(v = 0.5, col = 'blue')
plot((ss3[, i + 6] + pseudocount) / (ss5[, i + 6] + pseudocount),
pch = 20, log = 'y',
xlab = "genes",
ylab = "3' end counts / 5' end counts",
main = colnames(ss3)[i + 6])
abline(v = 1, col = 'blue')
dev.off()
}
pseudocount <- 0.1
for (i in 1:nrow(bam.files)){
pdf(paste('./images/', colnames(ss3)[i + 6], '_intron_coverage.pdf', sep = ''))
plot(ss3[, i + 6] + pseudocount, ss5[, i + 6] + pseudocount,
pch = 20, log = 'xy',
xlab = "3' end counts",
ylab = "5' end counts",
main = paste(colnames(ss3)[i + 6], '(intron counts)', sep = '\n'),
sub = paste('Pearson R=', round(cor(ss3[, i + 6] + pseudocount, ss5[, i + 6] + pseudocount), 3), sep = ''))
abline(h = 0.5, col = 'red')
abline(v = 0.5, col = 'red')
plot((ss3[, i + 6] + pseudocount) / (ss5[, i + 6] + pseudocount),
pch = 20, log = 'y',
xlab = "genes",
ylab = "3' end counts / 5' end counts",
main = colnames(ss3)[i + 6])
abline(h = 1, col = 'blue')
dev.off()
}
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
log = 'xy', pch = 20,
xlim = c(0.01, 700),
ylim = c(0.01, 700))
range(efficiency.5ss[, comparisons[i, 1:2]])
range(efficiency.5ss[, comparisons[1, 1:2]])
range(efficiency.5ss[, comparisons[1, 1:2]], na.rm = TRUE)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
log = 'xy', pch = 20,
xlim = c(0.01, 700),
ylim = c(0.01, 700))
i = 1
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
log = 'xy', pch = 20,
xlim = c(0.01, 700),
ylim = c(0.01, 700))
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
log = 'xy', pch = 20)
limits.data <- efficiency.5ss[, comparisons[i, ]]
limits.data[limits.data %in% c(0, Inf)] <- NA
limits <- range(limits.data, na.rm = TRUE)
limits
limits.data <- efficiency.5ss[, comparisons[i, ]]
limits.data
limits.data %in% c(0, Inf)
limits.data[limits.data == 0 | limits.data == Inf)] <- NA
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits.data
limits <- range(limits.data, na.rm = TRUE)
limits
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
limits.data <- efficiency.5ss[, comparisons[i, ]]
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency per intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
# prepare figures for the paper
pdf('./images/splicing_efficiency.pdf')
for (i in 1:nrow(comparisons)){
pdf(paste('./images/', comparisons[i, 1], '_vs_', comparisons[i, 2], '_splicing_efficiency.pdf', sep = ''))
par(mar = c(4, 4, 4, 4))
# 5' splice site
limits.data <- efficiency.5ss[, comparisons[i, ]]
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
# 3' splice site
limits.data <- efficiency.3ss[, comparisons[i, ]]
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
plot(efficiency.3ss[, comparisons[i, 1]], efficiency.3ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(3\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
dev.off()
}
# prepare figures for the paper
pdf('./images/splicing_efficiency.pdf')
for (i in 1:nrow(comparisons)){
pdf(paste('./images/', comparisons[i, 1], '_vs_', comparisons[i, 2], '_splicing_efficiency.pdf', sep = ''))
par(mar = c(4, 4, 4, 4))
# 5' splice site
limits.data <- efficiency.5ss[, comparisons[i, ]]
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
# 3' splice site
limits.data <- efficiency.3ss[, comparisons[i, ]]
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
plot(efficiency.3ss[, comparisons[i, 1]], efficiency.3ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(3\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
dev.off()
}
for (i in 1:nrow(comparisons)){
pdf(paste('./images/', comparisons[i, 1], '_vs_', comparisons[i, 2], '_splicing_efficiency.pdf', sep = ''))
par(mar = c(4, 4, 4, 4))
# 5' splice site
limits.data <- efficiency.5ss[, comparisons[i, ]]
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
# 3' splice site
limits.data <- efficiency.3ss[, comparisons[i, ]]
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
plot(efficiency.3ss[, comparisons[i, 1]], efficiency.3ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(3\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
dev.off()
}
for (i in 1:nrow(comparisons)){
pdf(paste('./images/', comparisons[i, 1], '_vs_', comparisons[i, 2], '_splicing_efficiency.pdf', sep = ''))
par(mar = c(4, 4, 4, 4))
limits.data <- cbind(efficiency.5ss[, comparisons[i, ]], efficiency.3ss[, comparisons[i, ]])
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
# 5' splice site
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
# 3' splice site
plot(efficiency.3ss[, comparisons[i, 1]], efficiency.3ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(3\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
dev.off()
}
ls()
junc.canonical
head(junc.canonical)
samples
junc.canonical[, samples] < 5
rownames(junc.canonical)
rownames(ss5)
order(ss5)
x <- matrix(NA, dim(junc.canonical[, samples]))
dim(x)
x
x <- matrix(NA, dim(junc.canonical[, samples]))
dim(junc.canonical[, samples])
x <- matrix(NA, nrow(junc.canonical, length(samples))
x <- matrix(NA, nrow(junc.canonical), length(samples))
x <- matrix(NA, nrow(junc.canonical), length(samples))
x
x <- matrix(FALSE, nrow(junc.canonical), length(samples))
x
x <- matrix(FALSE, nrow(junc.canonical), length(samples))
threshold <- 5
x[junc.canonical[, samples] >= threshold] <- TRUE
x <- matrix(FALSE, nrow(junc.canonical), length(samples))x
x
threshold <- 5
confidence.5ss <- matrix(TRUE, nrow(junc.canonical), length(samples))
confidence.5ss[junc.canonical[, samples] < threshold] <- FALSE
confidence.5ss[ss5[, samples] < threshold] <- FALSE
confidence.3ss <- matrix(TRUE, nrow(junc.canonical), length(samples))
confidence.3ss[junc.canonical[, samples] < threshold] <- FALSE
confidence.3ss[ss3[, samples] < threshold] <- FALSE
ss5[, comparisons[1,]]
comparisons[1, ]
ss5[confidence.5ss == TRUE, comparisons[1, ]]
confidence.5ss[, comparisons[1, ]
confidence.5ss[, comparisons[1, ]
confidence.5ss[, comparisons[1, ]
]
confidence.5ss[, comparisons[1, ]]
head(confidence.5ss)
confidence.5ss <- matrix(TRUE, nrow(junc.canonical), length(samples))
colnames(confidence.5ss) <- samples
confidence.5ss[junc.canonical[, samples] < threshold] <- FALSE
confidence.5ss[ss5[, samples] < threshold] <- FALSE
confidence.3ss <- matrix(TRUE, nrow(junc.canonical), length(samples))
colnames(confidence.3ss) <- samples
confidence.3ss[junc.canonical[, samples] < threshold] <- FALSE
confidence.3ss[ss3[, samples] < threshold] <- FALSE
head(confidence.5ss)
confidence.5ss[, comparisons[1, ]]
ss5[confidence.5ss[, comparisons[1, ]] == TRUE, comparisons[1, ]]
ss5[confidence.5ss[samples[1] == TRUE, ]
ss5[confidence.5ss[samples[1]] == TRUE, ]
ss5[confidence.5ss[samples[1]] == TRUE, samples[1]]
samples[1]
colnames(ss5)
ss5[samples[1]]
ss5[confidence.5ss[, samples[1]] == TRUE, samples[1]]
junc.canonical[confidence.5ss[, samples[1]] == TRUE, samples[1]]
ss3[confidence.3ss[, samples[1]] == TRUE, samples[1]]
ss3[confidence.3ss[, samples[1]] == FALSE, samples[1]]
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
points(efficiency.5ss[confidence.5ss[, comparisons[i, 1]] == FALSE, comparisons[i, 1]],
efficiency.5ss[confidence.5ss[, comparisons[i, 2]] == FALSE, comparisons[i, 2]],
log = 'xy', pch = 20, col = 'gray')
points(efficiency.5ss[confidence.5ss[, comparisons[i, ]] == FALSE, comparisons[i, 1]],
efficiency.5ss[confidence.5ss[, comparisons[i, ]] == FALSE, comparisons[i, 2]],
log = 'xy', pch = 20, col = 'gray')
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 20,
xlim = limits, ylim = limits)
abline(a = 0, b = 1)
points(efficiency.5ss[confidence.5ss[, comparisons[i, ]] == FALSE, comparisons[i, 1]],
efficiency.5ss[confidence.5ss[, comparisons[i, ]] == FALSE, comparisons[i, 2]],
pch = 20, col = 'gray')
plot(efficiency.3ss[, comparisons[i, 1]], efficiency.3ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(3\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21,
xlim = limits, ylim = limits)
plot(efficiency.3ss[, comparisons[i, 1]], efficiency.3ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(3\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 19,
xlim = limits, ylim = limits)
efficiency.5ss.conf <- efficiency.5ss
efficiency.5ss.conf
efficiency.5ss.conf <- efficiency.5ss
efficiency.5ss.conf[confidence.5ss[, samples] == FALSE, samples] <- NA
write.csv(efficiency.5ss.conf, file = './efficiency/splicing_efficiency_5ss_conf.csv', row.names = FALSE, quote = TRUE)
efficiency.3ss.conf <- efficiency.3ss
efficiency.3ss.conf[confidence.3ss[, samples] == FALSE, samples] <- NA
write.csv(efficiency.3ss.conf, file = './efficiency/splicing_efficiency_3ss_conf.csv', row.names = FALSE, quote = TRUE)
efficiency.5ss.conf[confidence.5ss == FALSE, samples] <- NA
efficiency.5ss.conf <- efficiency.5ss
efficiency.3ss.conf <- efficiency.3ss
for (i in samples){
efficiency.5ss.conf[confidence.5ss[, i] == FALSE, i] <- NA
efficiency.3ss.conf[confidence.3ss[, i] == FALSE, i] <- NA
}
write.csv(efficiency.5ss.conf, file = './efficiency/splicing_efficiency_5ss_conf.csv', row.names = FALSE, quote = TRUE)
write.csv(efficiency.3ss.conf, file = './efficiency/splicing_efficiency_3ss_conf.csv', row.names = FALSE, quote = TRUE)
threshold.counts <- 5 # minimum number of transreads & reads at 3' / 5' intron end required to treat any calculations as valid
confidence.5ss <- matrix(TRUE, nrow(junc.canonical), length(samples))
colnames(confidence.5ss) <- samples
confidence.5ss[junc.canonical[, samples] < threshold.counts] <- FALSE
confidence.5ss[ss5[, samples] < threshold.counts] <- FALSE
confidence.3ss <- matrix(TRUE, nrow(junc.canonical), length(samples))
colnames(confidence.3ss) <- samples
confidence.3ss[junc.canonical[, samples] < threshold.counts] <- FALSE
confidence.3ss[ss3[, samples] < threshold.counts] <- FALSE
efficiency.5ss.conf <- efficiency.5ss
efficiency.3ss.conf <- efficiency.3ss
for (i in samples){
efficiency.5ss.conf[confidence.5ss[, i] == FALSE, i] <- NA
efficiency.3ss.conf[confidence.3ss[, i] == FALSE, i] <- NA
}
write.csv(efficiency.5ss.conf, file = './efficiency/splicing_efficiency_5ss_conf.csv', row.names = FALSE, quote = TRUE)
write.csv(efficiency.3ss.conf, file = './efficiency/splicing_efficiency_3ss_conf.csv', row.names = FALSE, quote = TRUE)
comparisons <- t(matrix(c('SRR953537_1', 'SRR953535_1'),
nrow = 2, ncol = 1)) # prepare a table of sample pairs to be compared: c(mutant, WT)
# all introns
efficiency.5ss.rel <- cbind(efficiency.5ss[, c('chrom', 'start', 'end', 'name', 'score', 'strand')], as.list(rep(NA, nrow(comparisons))))
efficiency.3ss.rel <- cbind(efficiency.3ss[, c('chrom', 'start', 'end', 'name', 'score', 'strand')], as.list(rep(NA, nrow(comparisons))))
for (i in 1:nrow(comparisons)){
efficiency.5ss.rel[, i + 6] <- efficiency.5ss[, comparisons[i, 1]] / efficiency.5ss[, comparisons[i, 2]]
colnames(efficiency.5ss.rel)[i + 6] <- paste(comparisons[i, 1], comparisons[i, 2], sep = '_')
efficiency.3ss.rel[, i + 6] <- efficiency.3ss[, comparisons[i, 1]] / efficiency.3ss[, comparisons[i, 2]]
colnames(efficiency.3ss.rel)[i + 6] <- paste(comparisons[i, 1], comparisons[i, 2], sep = '_')
}
write.csv(efficiency.5ss.rel, file = './efficiency/relative_splicing_efficiency_5ss.csv', row.names = FALSE, quote = TRUE)
write.csv(efficiency.3ss.rel, file = './efficiency/relative_splicing_efficiency_3ss.csv', row.names = FALSE, quote = TRUE)
# introns with coverage above threshold
efficiency.5ss.rel.conf <- cbind(efficiency.5ss.conf[, c('chrom', 'start', 'end', 'name', 'score', 'strand')], as.list(rep(NA, nrow(comparisons))))
efficiency.3ss.rel.conf <- cbind(efficiency.3ss.conf[, c('chrom', 'start', 'end', 'name', 'score', 'strand')], as.list(rep(NA, nrow(comparisons))))
for (i in 1:nrow(comparisons)){
efficiency.5ss.rel.conf[, i + 6] <- efficiency.5ss.conf[, comparisons[i, 1]] / efficiency.5ss.conf[, comparisons[i, 2]]
colnames(efficiency.5ss.rel.conf)[i + 6] <- paste(comparisons[i, 1], comparisons[i, 2], sep = '_')
efficiency.3ss.rel.conf[, i + 6] <- efficiency.3ss.conf[, comparisons[i, 1]] / efficiency.3ss.conf[, comparisons[i, 2]]
colnames(efficiency.3ss.rel.conf)[i + 6] <- paste(comparisons[i, 1], comparisons[i, 2], sep = '_')
}
write.csv(efficiency.5ss.rel.conf, file = './efficiency/relative_splicing_efficiency_5ss_conf.csv', row.names = FALSE, quote = TRUE)
write.csv(efficiency.3ss.rel.conf, file = './efficiency/relative_splicing_efficiency_3ss_conf.csv', row.names = FALSE, quote = TRUE)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'grey' ,
xlim = limits, ylim = limits)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 20, col = 'black')
abline(a = 0, b = 1)
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey' ,
xlim = limits, ylim = limits)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 20, col = 'black')
abline(a = 0, b = 1)
# 5' splice site
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey' ,
xlim = limits, ylim = limits)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 20, col = 'black')
abline(a = 0, b = 1)
legend('bottomright', legend = c(paste('read coverage >= ', threshold.counts, sep = ''),
paste('read coverage < '), threshold.counts, sep = ''))
legend('bottomright', legend = c(paste('read coverage >= ', threshold.counts, sep = ''),
paste('read coverage < '), threshold.counts, sep = ''),
box.lty = 'n')
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey' ,
xlim = limits, ylim = limits)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 20, col = 'black')
abline(a = 0, b = 1)
legend('bottomright', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< '), threshold.counts, ' reads',  sep = ''),
box = 'n')
legend('bottomright', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< '), threshold.counts, ' reads',  sep = ''),
bty = 'n')
legend('bottom', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< '), threshold.counts, ' reads',  sep = ''),
bty = 'n')
legend('bottom', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< '), threshold.counts, ' reads', sep = ''),
bty = 'n')
legend('bottom', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< ', threshold.counts, ' reads', sep = '')),
bty = 'n')
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey' ,
xlim = limits, ylim = limits)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 20, col = 'black')
abline(a = 0, b = 1)
legend('bottomright', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< ', threshold.counts, ' reads', sep = '')),
bty = 'n')
# 3' splice site
legend('bottomright', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< ', threshold.counts, ' reads', sep = '')),
bty = 'n', pch = c(20, 21))
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey' ,
xlim = limits, ylim = limits)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 19, col = 'black')
abline(a = 0, b = 1)
legend('bottomright', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< ', threshold.counts, ' reads', sep = '')),
bty = 'n', pch = c(19, 21), col = c('black', 'dark gray'))
# prepare figures for paper
for (i in 1:nrow(comparisons)){
pdf(paste('./images/', comparisons[i, 1], '_vs_', comparisons[i, 2], '_splicing_efficiency.pdf', sep = ''))
par(mar = c(4, 4, 4, 4))
limits.data <- cbind(efficiency.5ss[, comparisons[i, ]], efficiency.3ss[, comparisons[i, ]])
limits.data[limits.data == 0 | limits.data == Inf] <- NA
limits <- range(limits.data, na.rm = TRUE)
# 5' splice site
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(5\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey' ,
xlim = limits, ylim = limits)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 19, col = 'black')
abline(a = 0, b = 1)
legend('bottomright', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< ', threshold.counts, ' reads', sep = '')),
bty = 'n', pch = c(19, 21), col = c('black', 'dark gray'))
# 3' splice site
plot(efficiency.3ss[, comparisons[i, 1]], efficiency.3ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(3\' splice site)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey',
xlim = limits, ylim = limits)
points(efficiency.3ss.conf[, comparisons[i, 1]], efficiency.3ss.conf[, comparisons[i, 2]],
pch = 19, col = 'black')
abline(a = 0, b = 1)
legend('bottomright', legend = c(paste('>= ', threshold.counts, ' reads', sep = ''),
paste('< ', threshold.counts, ' reads', sep = '')),
bty = 'n', pch = c(19, 21), col = c('black', 'dark gray'))
dev.off()
}
plot(efficiency.5ss[, comparisons[i, 1]], efficiency.5ss[, comparisons[i, 2]],
main = paste('Splicing efficiency for each intron\n(transreads / 5\' splice site reads)', sep = '\n'),
xlab = comparisons[i, 1],
ylab = comparisons[i, 2],
log = 'xy', pch = 21, col = 'darkgrey' ,
xlim = limits, ylim = limits, axes = FALSE)
points(efficiency.5ss.conf[, comparisons[i, 1]], efficiency.5ss.conf[, comparisons[i, 2]],
pch = 19, col = 'black')
abline(a = 0, b = 1)
